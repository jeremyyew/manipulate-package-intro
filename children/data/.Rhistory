"log10", "log1p", "log2", "logit",
"probability", "probit", "reciprocal",
"reverse", "sqrt", initial = "identity",
label = "X Scale Transformation"),
# Switch between datasets.
data = picker("Chromium" = chromium, "Nickel" = nickel, label = "Datasets"),
# Pick appropriate point colour (searchable).
scater = picker(as.list(rownames(brewer.pal.info)),
label = "Palette"),
# Pick appropriate regresion colour (searchable).
# Use as.list() as picker eithr takes lists or individual arguments.
# It would interpret a vector as a single option which it would not know
# how to handle.
lm = picker(as.list(colours()),
label = "Regression")
)
library(reshape)
library(reshape2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?attitude
unlink('Dropbox/DAVis/davis project/manipulatePackage_cache', recursive = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
unlink('Dropbox/DAVis/davis project/manipulatePackage_cache', recursive = TRUE)
?geom_smooth
as.list(names(mpg))
(names(mpg))
asean_tourism <- read.csv("~/Desktop/DAVIS/asean_tourism.csv", stringsAsFactors = FALSE)
asean_tourism <- read.csv("Dropbox/DAVis/Class Exercise RMD/data/L13/asean_tourism.csv", stringsAsFactors = FALSE)
View(asean_tourism)
library(manipulate)
manipulate(
plot(cars, xlim = c(x.min, x.max), type = type,
axes = axes, ann = label),
x.min = slider(0,15),
x.max = slider(15,30, initial = 25),
type = picker("p", "l", "b", "c", "o", "h", "s", "S", "n"),
axes = checkbox(TRUE, "Draw Axes"),
label = checkbox(FALSE, "Draw Labels"))
manipulate(
plot(cars, xlim = c(x.min, x.max), type = type,
axes = axes, ann = label),
x.min = slider(0,15),
x.max = slider(15,30, initial = 25),
type = picker("p", "l", "b", "c", "o", "h", "s", "S", "n"),
axes = checkbox(TRUE, "Draw Axes"),
label = checkbox(FALSE, "Draw Labels"))
manipulate(
plot(cars, xlim = c(x.min, x.max), type = plot_type,
axes = axes, ann = label),
x.min = slider(0, 15),
x.max = slider(15, 30, initial = 25),
plot_type = picker("p", "l", "b", "c", "o", "h", "s", "S", "n"),
axes = checkbox(TRUE, "Axes"),
label = checkbox(TRUE, "Labels")
)
manipulate(
plot(cars, xlim = c(x.min, x.max), type = plot_type,
axes = axes, ann = label),
x.min = slider(0, 15),
x.max = slider(15, 30, initial = 25),
plot_type = picker("p", "l", "b", "c", "o", "h", "s", "S", "n"),
axes = checkbox(TRUE, "Axes"),
label = checkbox(TRUE, "Labels")
)
unlink('Dropbox/DAVis/davis project/manipulatePackage_cache', recursive = TRUE)
manipulate({
p <- ggplot(data, aes(air, bm, colour = welding.type)) + geom_point()
p + geom_smooth(aes(group = ""), method = "lm", colour = lm) +
scale_x_continuous(trans = xScale) +
scale_y_continuous(trans = yScale) +
scale_colour_manual(values = brewer.pal(4, scater))
},
# Pick appropriate transformation
yScale = picker("asn", "atanh", "boxcox",
"exp", "identity", "log",
"log10", "log1p", "log2", "logit",
"probability", "probit", "reciprocal",
"reverse", "sqrt", initial = "identity",
label = "Y Scale Transformation"),
xScale = picker("asn", "atanh", "boxcox",
"exp", "identity", "log",
"log10", "log1p", "log2", "logit",
"probability", "probit", "reciprocal",
"reverse", "sqrt", initial = "identity",
label = "X Scale Transformation"),
# Switch between datasets.
data = picker("Chromium" = chromium, "Nickel" = nickel, label = "Datasets"),
# Pick appropriate point colour (searchable).
scater = picker(as.list(rownames(brewer.pal.info)),
label = "Palette"),
# Pick appropriate regresion colour (searchable).
# Use as.list() as picker eithr takes lists or individual arguments.
# It would interpret a vector as a single option which it would not know
# how to handle.
lm = picker(as.list(colours()),
label = "Regression")
)
# Prepare the data.
asean_tourism <- read.csv("Dropbox/DAVis/Class Exercise RMD/data/L13/asean_tourism.csv", stringsAsFactors = FALSE)
# Prepare the data.
asean_tourism <- read.csv("Dropbox/DAVis/Class Exercise RMD/data/L13/asean_tourism.csv", stringsAsFactors = FALSE)
# Prepare the data.
asean_tourism <- read.csv("Dropbox/DAVis/Class Exercise RMD/data/L13/asean_tourism.csv", stringsAsFactors = FALSE)
```{r}
# Prepare the data.
asean_tourism <- read.csv("Dropbox/DAVis/Class Exercise RMD/data/L13/asean_tourism.csv", stringsAsFactors = FALSE)
# Prepare the data.
asean_tourism <- read.csv("data/asean_tourism.csv", stringsAsFactors = FALSE)
names(asean_tourism)[1] <- "country"
library(manipulate)
library(ggplot2)
manipulate(
ggplot(asean_tourism, aes_string("country", paste("X", year, sep=""), fill="country")) +
geom_bar(stat="identity") +
theme(legend.position="none",
axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)),
year = picker(as.list(c(2004:2015)))
)
names(asean_tourism)[1] <- "country"
ggplot(asean_tourism, aes(country, X2004, fill=country)) +
geom_bar(stat="identity") +
theme(legend.position="none",
axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1))
asean_tourism <- read.csv("data/asean_tourism.csv", stringsAsFactors = FALSE)
names(asean_tourism)[1] <- "country"
library(ggplot2)
country <- reorder(country, visit, function(x) -x)
asean_tourism$country <- reorder(asean_tourism$country, visit, function(x) -x)
ast$country <- reorder(ast$country, ast$visit, function(x) -x)
ast <- read.csv("data/asean_tourism.csv", stringsAsFactors = FALSE)
names(ast)[1] <- "country"
ast$country <- reorder(ast$country, ast$visit, function(x) -x)
View(ast)
library(ggplot2)
ast <- read.csv("data/asean_tourism.csv", stringsAsFactors = FALSE)
names(ast)[1] <- "country"
View(ast)
shiny::runApp('Dropbox/DAVis/Class Exercise RMD/Week13B1')
View(faithful)
head(faithful)
kable(head(faithful))
library(kable)
library(knitr)
kable(head(faithful))
head(faithful)
runApp('Dropbox/DAVis/Class Exercise RMD/Week13B1')
manipulate(
{x <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')},
bins <- slider(min = 1, max = 50, initial = 30, label = "Number of bins:")
)
manipulate(
{x <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')},
bins <- slider(min = 1, max = 50, initial = 30, label = "Number of bins:")
)
?slider
manipulate(
{x <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')},
bins <- slider(1, 50, initial = 30, label = "Number of bins:")
)
manipulate(
{x <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')},
bins = slider(1, 50, initial = 30, label = "Number of bins:")
)
library(manipulate)
manipulate(
{x <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')},
bins = slider(min = 1, max = 50, initial = 30, label = "Number of bins:")
)
library(manipulate)
manipulate(
{x <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')},
bins = slider(1, 50, initial = 30, label = "Number of bins:")
)
?faithful
?manipulate
f <- function(numBins) {
x <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = numBins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
}
manipulate(
f(numBins),
numBins = slider(min = 1, max = 50, initial = 30, label = "Number of bins:")
)
runApp('Dropbox/DAVis/Class Exercise RMD/Week13B1')
runApp('Dropbox/DAVis/Class Exercise RMD/Week13B1')
library(manipulate)
manipulate(
{x <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')},
bins = slider(1, 50, initial = 30, label = "Number of bins:")
)
# Note that aes_string() is used instead of aes().
# This is to allow input of a string.
manipulate(
ggplot(attitude, aes_string(x = x.variable,y = "rating"))+
geom_point() + geom_smooth(method = method),
# Create 2 picker options:
# 1. x.variable, which contains the names of all the categories
# that can be plotted on the x axis.
# 2. method, which containes the different methods of smoothing
# that can be used to smooth the data.
# x.variable and method can be altered using the pickers.
x.variable = picker("rating","complaints","privileges",
"learning","raises","critical","advance"),
method = picker("lm", "glm", "gam", "loess", "rlm")
)
library(manipulate)
manipulate(
{x <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')},
bins = slider(1, 50, initial = 30, label = "Number of bins:")
)
manipulate(
plot(cars, xlim = c(x.min, x.max), type = plot_type,
axes = axes, ann = label),
x.min = slider(0, 15),
x.max = slider(15, 30, initial = 25),
plot_type = picker("p", "l", "b", "c", "o", "h", "s", "S", "n"),
axes = checkbox(TRUE, "Axes"),
label = checkbox(TRUE, "Labels")
)
list(names(mpg))
manipulate(
ggplot(data = mpg, aes_string(x, y))+  #prepare ggplot using mpg     dataset. we use x and y as variables that we can manipulate later.
geom_boxplot(fill = "white", colour = "#3366FF")+  #plot boxplots # adjust colour and fill to make them more visible.
theme(axis.text.x = element_text(angle = 90,  #rotate x labels to be perpendicular to the x-axis.
vjust = 0.5,
hjust = 1)),
x = picker(names(mpg)),    #insert slider for x-variable. we use as.list because we are selecting the variables of the mpg dataset.
y = picker(as.list(names(mpg)))     #insert slider for y-variable.
)
manipulate(
ggplot(data = mpg, aes_string(x, y))+  #prepare ggplot using mpg     dataset. we use x and y as variables that we can manipulate later.
geom_boxplot(fill = "white", colour = "#3366FF")+  #plot boxplots # adjust colour and fill to make them more visible.
theme(axis.text.x = element_text(angle = 90,  #rotate x labels to be perpendicular to the x-axis.
vjust = 0.5,
hjust = 1)),
x = picker(list(names(mpg))),    #insert slider for x-variable. we use as.list because we are selecting the variables of the mpg dataset.
y = picker(as.list(names(mpg)))     #insert slider for y-variable.
)
manipulate(
ggplot(data = mpg, aes_string(x, y))+  #prepare ggplot using mpg     dataset. we use x and y as variables that we can manipulate later.
geom_boxplot(fill = "white", colour = "#3366FF")+  #plot boxplots # adjust colour and fill to make them more visible.
theme(axis.text.x = element_text(angle = 90,  #rotate x labels to be perpendicular to the x-axis.
vjust = 0.5,
hjust = 1)),
x = picker(names(mpg)),    #insert slider for x-variable. we use as.list because we are selecting the variables of the mpg dataset.
y = picker(as.list(names(mpg)))     #insert slider for y-variable.
)
# Prepare the data.
asean_tourism <- read.csv("data/asean_tourism.csv", stringsAsFactors = FALSE, check.names=FALSE)
names(asean_tourism)[1] <- "country"
library(manipulate)
library(ggplot2)
manipulate(
ggplot(asean_tourism, aes_string("country", paste("X", year, sep=""), fill="country")) +
geom_bar(stat="identity") +
theme(legend.position="none",
axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)),
year = picker(as.list(c(2004:2015)))
)
manipulate(
ggplot(asean_tourism, aes_string("country", paste("X", year, sep=""), fill="country")) +
geom_bar(stat="identity") +
theme(legend.position="none",
axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)),
year = picker(as.list(c(2004:2015)))
)
# Prepare the data.
asean_tourism <- read.csv("data/asean_tourism.csv", stringsAsFactors = FALSE, check.names=FALSE)
names(asean_tourism)[1] <- "country"
# Prepare the data.
asean_tourism <- read.csv("data/asean_tourism.csv", stringsAsFactors = FALSE, check.names=FALSE)
names(asean_tourism)[1] <- "country"
# Prepare the data.
asean_tourism <- read.csv("data/asean_tourism.csv", stringsAsFactors = FALSE, check.names=FALSE)
# Prepare the data.
asean_tourism <- read.csv("children/data/asean_tourism.csv", stringsAsFactors = FALSE, check.names=FALSE)
# Prepare the data.
asean_tourism <- read.csv("children/data/asean_tourism.csv", stringsAsFactors = FALSE, check.names=FALSE)
# Prepare the data.
asean_tourism <- read.csv("../children/data/asean_tourism.csv", stringsAsFactors = FALSE, check.names=FALSE)
# Prepare the data.
asean_tourism <- read.csv("data/asean_tourism.csv", stringsAsFactors = FALSE, check.names=FALSE)
# Prepare the data.
asean_tourism <- read.csv("data/asean_tourism.csv", stringsAsFactors = FALSE, check.names=FALSE)
# Prepare the data.
asean_tourism <- read.csv("children/data/asean_tourism.csv", stringsAsFactors = FALSE, check.names=FALSE)
# Prepare the data.
asean_tourism <- read.csv("children/data/asean_tourism.csv", stringsAsFactors = FALSE, check.names=FALSE)
getwd
getwd()
# Preview ----------------------------------------------------------------------
setwd("Dropbox/DAVis/davis project/children/data")
# Preview ----------------------------------------------------------------------
setwd("Dropbox/DAVis/davis project/children/data")
# Prepare the data.
asean_tourism <- read.csv("asean_tourism.csv", stringsAsFactors = FALSE, check.names=FALSE)
names(asean_tourism)[1] <- "country"
manipulate(
ggplot(asean_tourism, aes_string("country", year, fill="country")) +
geom_bar(stat="identity") +
theme(legend.position="none",
axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)),
year = picker(as.list(c(2004:2015)))
)
# Load the installed packages required to complete the task.
library(manipulate)
library(ggplot2)
# Note that aes_string() is used instead of aes().
# This is to allow input of a string.
manipulate(
ggplot(attitude, aes_string(x=x.variable,y="rating"))+
geom_point()+geom_smooth(method = method),
# Create 2 picker options:
# 1. x.variable, which contains the names of all the categories
# that can be plotted on the x axis.
# 2. method, which containes the different methods of smoothing
# that can be used to smooth the data.
# x.variable and method can be altered using the pickers.
x.variable=picker("rating","complaints","privileges",
"learning","raises","critical","advance"),
method=picker("lm", "glm", "gam", "loess", "rlm")
)
library(ggplot2)
ggplot(data = mpg, aes(manufacturer,
cty)) +
geom_boxplot(fill = "white", colour = "#3366FF")+
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1))
# Example B
# Begin manipulate function.
manipulate(
ggplot(data = mpg, aes_string(x, y))+  #prepare ggplot using mpg     dataset. we use x and y as variables that we can manipulate later.
geom_boxplot(fill = "white", colour = "#3366FF")+  #plot boxplots # adjust colour and fill to make them more visible.
theme(axis.text.x = element_text(angle = 90,  #rotate x labels to be perpendicular to the x-axis.
vjust = 0.5,
hjust = 1)),
x = picker(as.list(names(mpg))),    #insert slider for x-variable. we use as.list because we are selecting the variables of the mpg dataset.
y = picker(as.list(names(mpg)))     #insert slider for y-variable.
)
library(ggplot2)
ggplot(data = mpg, aes(manufacturer,
manufacturer)) +
geom_boxplot(fill = "white", colour = "#3366FF") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1))
# Prepare the data.
asean_tourism <- read.csv("children/data/asean_tourism.csv",
stringsAsFactors = FALSE)
names(asean_tourism)[1] <- "country"
library(manipulate)
library(ggplot2)
manipulate(
ggplot(asean_tourism, aes_string("country", paste("X", year, sep=""),
fill="country")) +
geom_bar(stat="identity") +
theme(legend.position="none",
axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)),
year = picker(as.list(c(2004:2015)))
)
library(ggplot2)
ggplot(asean_tourism, aes(country, X2004, fill=country)) +
geom_bar(stat="identity") +
theme(legend.position="none",
axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1))
manipulate(
ggplot(asean_tourism, aes_string("country", paste("X", year, sep=""),
fill="country")) +
geom_bar(stat="identity") +
theme(legend.position="none",
axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)),
year = picker(as.list(c(2004:2015)))
)
asean_tourism <- read.csv("children/data/asean_tourism.csv",
stringsAsFactors = FALSE)
names(asean_tourism)[1] <- "country"
library(manipulate)
library(ggplot2)
manipulate(
ggplot(asean_tourism, aes_string("country", paste("X", year, sep=""),
fill="country")) +
geom_bar(stat="identity") +
theme(legend.position="none",
axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)),
year = picker(as.list(c(2004:2015)))
)
# Prepare the data.
asean_tourism <- read.csv("children/data/asean_tourism.csv",
stringsAsFactors = FALSE)
# Prepare the data.
asean_tourism <- read.csv("asean_tourism.csv",
stringsAsFactors = FALSE)
names(asean_tourism)[1] <- "country"
library(manipulate)
library(ggplot2)
manipulate(
ggplot(asean_tourism, aes_string("country", paste("X", year, sep=""),
fill="country")) +
geom_bar(stat="identity") +
theme(legend.position="none",
axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)),
year = picker(as.list(c(2004:2015)))
)
library(manipulate)
library(RColorBrewer)
library(ggplot2)
chromium <- read.csv("chromium.csv", stringsAsFactors = FALSE)
nickel <- read.csv("nickel.csv", stringsAsFactors = FALSE)
ggplot(chromium, aes(air, bm, colour = welding.type)) +
geom_point() +
geom_smooth(aes(group = ""), method = "lm")
ggplot(nickel, aes(air, bm, colour = welding.type)) +
geom_point() +
geom_smooth(aes(group = ""), method = "lm")
?scale_x_continuous
manipulate({
p <- ggplot(data, aes(air, bm, colour = welding.type)) + geom_point()
p + geom_smooth(aes(group = ""), method = "lm", colour = lm) +
scale_x_continuous(trans = xScale) +
scale_y_continuous(trans = yScale) +
scale_colour_manual(values = brewer.pal(4, scater))
},
# Pick appropriate transformation
yScale = picker("asn", "atanh", "boxcox",
"exp", "identity", "log",
"log10", "log1p", "log2", "logit",
"probability", "probit", "reciprocal",
"reverse", "sqrt",
label = "Y Scale Transformation"),
xScale = picker("asn", "atanh", "boxcox",
"exp", "identity", "log",
"log10", "log1p", "log2", "logit",
"probability", "probit", "reciprocal",
"reverse", "sqrt",
label = "X Scale Transformation"),
# Switch between datasets
data = picker("Chromium" = chromium, "Nickel" = nickel, label = "Datasets"),
# Pick appropriate point colour (searchable)
scater = picker(as.list(rownames(brewer.pal.info)),
label = "Palette"),
# Pick appropriate regresion colour (searchable)
lm = picker(as.list(colours()),
label = "Regression")
)
manipulate({
p <- ggplot(data, aes(air, bm, colour = welding.type)) + geom_point()
p + geom_smooth(aes(group = ""), method = "lm", colour = lm) +
scale_x_continuous(trans = xScale) +
scale_y_continuous(trans = yScale) +
scale_colour_manual(values = brewer.pal(4, scater))
},
# Pick appropriate transformation
yScale = picker("asn", "atanh", "boxcox",
"exp", "identity", "log",
"log10", "log1p", "log2", "logit",
"probability", "probit", "reciprocal",
"reverse", "sqrt", initial = "identity",
label = "Y Scale Transformation"),
xScale = picker("asn", "atanh", "boxcox",
"exp", "identity", "log",
"log10", "log1p", "log2", "logit",
"probability", "probit", "reciprocal",
"reverse", "sqrt", initial = "identity",
label = "X Scale Transformation"),
# Switch between datasets
data = picker("Chromium" = chromium, "Nickel" = nickel, label = "Datasets"),
# Pick appropriate point colour (searchable)
scater = picker(as.list(rownames(brewer.pal.info)),
label = "Palette"),
# Pick appropriate regresion colour (searchable)
lm = picker(as.list(colours()),
label = "Regression")
)
