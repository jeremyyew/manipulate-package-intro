?identical
#test if function is diagonal
isDiag <- function (a) {
identical(a, diag(diag(a)))
}
diag(5)
isDiag(diag(5))
lower.tri(diag(4))
#test if matrix is upper triangular4
isUpperTri <- function(a) {
if (is.matrix(a))
all(a[lower.tri(a)] == 0) && all(diag(a) != 0)
else
stop("You done messed up.")
}
matrix <- rbind(c(1,2,3),
c(4,5,6),
c(7,8,9))
isUpperTri(matrix)
matrix <- rbind(c(1,2,3),
c(0,5,6),
c(0,0,9))
isUpperTri(matrix)
matrix <- rbind(c(1,2,3),
c(0,0,6),
c(0,0,9))
isUpperTri(matrix)
#test if matrix is upper triangular4
isLowerTri <- function(a) {
if (is.matrix(a))
all(a[lower.tri(a)] == 0) && all(diag(a) != 0)
else
stop("You done messed up.")
}
#test if matrix is upper triangular4
isLowerTri <- function(a) {
if (is.matrix(a) && is.numeric(a))
all(a[lower.tri(a)] == 0) && (nrow(a) == ncol(a))
else
stop("You done messed up.")
}
matrix <- rbind(c(1,2,3),
c(0,0,6),
c(0,0,9))
isLowerTri(matrix)
#alternating 1 and 0
alter <- matrix(c(1,0), 8, 8)
alter
?matrix
#alternating 1 and 0
alter <- matrix(c(1,0), 8, 8, byrow = TRUE)
alter
alterLogical <- as.logical(a)
alterLogical <- as.logical(alter)
alterLogical
alterLogical <- matrix(as.logical(alter))
alterLogical
alterLogical <- matrix(as.logical(alter), 8 , 8)
alterLogical
#alternating 1 and 0
alter <- matrix(0, 8, 8)
#alternating 1 and 0
alter <- matrix(0, 8, 9)
alter
#alternating 1 and 0
alter <- matrix(c(1,0), 8, 9)
alter
#alternating 1 and 0
alter <- matrix(c(1,0), 8, 9, byrow = TRUE)
lter
alter
alterFinal <- alter[,-9]
alterFinal
#hilbert matrix
hilbert <- function(a) {
if(is.numeric(a)){
vector <- 1/n
while (n >= 1) {
vector <- c(1/(n-1), vector)
n = n -1
}
} else
stop("You done messed up")
}
hilbert(4)
#hilbert matrix
hilbert <- function(n) {
if(is.numeric(n)){
vector <- 1/n
while (n >= 1) {
vector <- c(1/(n-1), vector)
n = n -1
}
} else
stop("You done messed up")
}
hilbert(4)
hilbert(4)
#hilbert matrix
hilbert <- function(n) {
if(is.numeric(n)){
vector <- NULL
while (n >= 1) {
vector <- c(1/n, vector)
n = n - 1
}
} else
stop("You done messed up")
}
hilbert(4)
rep(1:5, 5)
vector <- (rep(0:n)+1:n)
n <- 5
vector <- (rep(0:n)+1:n)
vector
vector <- (rep(0:n, each = n)+1:n)
vector
#hilbert matrix
hilbert <- function(n) {
if(is.numeric(n)){
vector <- (rep(0:n, each = n)+1:n)
matrix <- matrix(vector, dim(c(n,n)))
}
} else
#hilbert matrix
hilbert <- function(n) {
if(is.numeric(n)){
vector <- (rep(0:n, each = n)+1:n)
matrix <- matrix(vector, dim(c(n,n)))
} else
stop("You done messed up")
}
holbert(5)
hilbert(5)
#hilbert matrix
hilbert <- function(n) {
if(is.numeric(n)){
vector <- (rep(0:n, each = n)+1:n)
matrix <- matrix(vector, nrow == n)
} else
stop("You done messed up")
}
hilbert(6)
#hilbert matrix
hilbert <- function(n) {
if(is.numeric(n)){
vector <- (rep(0:n, each = n)+1:n)
matrix <- matrix(vector, nrow == n)
} else
stop("You done messed up")
}
hilbert(6)
#hilbert matrix
hilbert <- function(n) {
if(is.numeric(n)){
vector <- (rep(0:n, each = n)+1:n)
matrix <- matrix(vector, nrow = n)
} else
stop("You done messed up")
}
hilbert(6)
#hilbert matrix
hilbert <- function(n) {
if(is.numeric(n)){
vector <- (rep(0:n, each = n)+1:n)
matrix <- matrix(vector, nrow = n)
return(matrix)
} else
stop("You done messed up")
}
hilbert(6)
source('~/Downloads/Problems_1a__b__c_with_comments_and_test_output_.r')
?seq
print(sprintf("c_n(%d) = %f", n, res))
# Problem 1a.  As seen in the printed output, the functions a_n(n) and a_n_2(n)
# converge to Euler's number e, i.e., exp(1) in R, as n approaches infinity.
# Using a for-loop.
a_n <- function(n) {
if (length(n) > 1) {
stop("Input should be a vector of length 1.")
} else if (!is.numeric(n)) {
stop("Input should be numeric.")
} else if (n < 0) {
stop("Input should be a non-negative number.")
}
# Initialize summation value as zero.
summ = 0
# For each integer k from 0 to n, add the term (1/k)! to the previous summation
# to get the new summation.  We use seq.int() here and in the following functions
# as it is faster than seq() for generating integer vectors.
for (k in seq.int(from = 0, n)) {
summ = summ + (1/factorial(k))
}
print(sprintf("a_n(%d) = %f", n, summ))
return(summ)
}
a_n(0)
a_n(1)
a_n(2)
a_n(3)
a_n(4)
a_n(5)
a_n(6)
a_n(10)
a_n(100)
a_n(170)  # inputs greater than 170 generate warnings as factorial(171) returns Inf.
# Using vectorwise computation.
a_n_2 <- function(n) {
if (length(n) > 1) {
stop("Input should be a vector of length 1.")
} else if (!is.numeric(n)) {
stop("Input should be numeric.")
} else if (n < 0) {
stop("Input should be a non-negative number.")
}
# We obtain a vector of values of each term 1/(k!) from 0 to n, as factorial()
# and numeric division are vectorized. We then obtain the sum of this vector.
summ <- sum(1/factorial(seq.int(from = 0, n)))
print(sprintf("a_n_2(%d) = %f", n, summ))
return(summ)
}
a_n_2(0)
a_n_2(1)
a_n_2(2)
a_n_2(3)
a_n_2(4)
a_n_2(5)
a_n_2(6)
a_n_2(10)
a_n_2(100)
a_n_2(170)  # inputs greater than 170 generate warnings as factorial(171) returns Inf.
# Problem 1b.  As seen in the printed output, the functions b_n(n) and b_n_2(n)
# converge to 2/3 as n approaches infinity.
# Using a for-loop.
b_n <- function(n) {
if (length(n) > 1) {
stop("Input should be a vector of length 1.")
} else if (!is.numeric(n)) {
stop("Input should be numeric.")
} else if (n < 2) {
stop("Input should be a number >= 2.")
}
# Initialize product value as 1.
product = 1
# For each integer k from 2 to n, multiply the term (k^3 - 1)/(k^3 + 1) by the
# previous product to get the new product.
for (k in seq.int(from = 2, n)) {
product = product * ((k^3 - 1)/(k^3 + 1))
}
print(sprintf("b_n(%d) = %f", n, product))
return(product)
}
b_n(2)
b_n(3)
b_n(5)
b_n(10)
b_n(100)
b_n(1000)
b_n(1e+06)
# Using vectorwise computation.
b_n_2 <- function(n) {
if (length(n) > 1) {
stop("Input should be a vector of length 1.")
} else if (!is.numeric(n)) {
stop("Input should be numeric.")
} else if (n < 2) {
stop("Input should be a number >= 2.")
}
# We obtain a vector of values of each term (k^3 - 1)/(k^3 + 1) from 2 to n, as
# exponentiation and numeric division are vectorized. We then obtain the product
# of this vector.
k <- seq.int(from = 2, n)
product <- prod((k^3 - 1)/(k^3 + 1))
print(sprintf("b_n_2(%d) = %f", n, product))
return(product)
}
b_n_2(2)
b_n_2(3)
b_n_2(5)
b_n_2(10)
b_n_2(100)
b_n_2(1000)
b_n_2(1e+06)
# Problem 1c.  As seen in the printed output, the functions c_n(n) and c_n_2(n)
# converge to pi as n approaches infinity.
# Using a for-loop.
c_n <- function(n) {
if (length(n) > 1) {
stop("Input should be a vector of length 1.")
} else if (!is.numeric(n)) {
stop("Input should be numeric.")
} else if (n <= 0) {
stop("Input should be a positive number.")
}
# Initialize result as 1/n.
res = 1/n
# For each integer k from n to 2, compute the term (1/(k - 1)) + (1/res) using
# the previous result.
for (k in seq.int(from = n, 2)) {
res = (1/(k - 1)) + (1/res)
}
# Perform outer calculation.
res = 2 + (2/res)
print(sprintf("c_n(%d) = %f", n, res))
return(res)
}
c_n(1)
c_n(3)
c_n(5)
c_n(10)
c_n(100)
c_n(1000)
c_n(1e+07)
# Using recursion, since the expression is a recurrence relation. Limited by
# stack.
c_n_2 <- function(n_init) {
if (length(n_init) > 1) {
stop("Input should be a vector of length 1.")
} else if (!is.numeric(n_init)) {
stop("Input should be numeric.")
} else if (n_init <= 0) {
stop("Input should be a positive number.")
}
# Recursive function which will compute each term 1/(n-1) + (1/res) using the
# previous result, and pass it to the next recursive call, for n from n_init to
# 2, after which it performs the outer calculation 2 + (2/res).
recurse <- function(n, res) {
if (n <= 1)
return(2 + (2/res)) else res <- 1/(n - 1) + (1/res)
return(recurse(n - 1, res))
}
# Initial call which initializes res as 1/n_init.
res <- recurse(n_init, 1/n_init)
print(sprintf("c_n_2(%d) = %f", n_init, res))
return(res)
}
c_n_2(1)
c_n_2(3)
c_n_2(5)
c_n_2(10)
c_n_2(100)
c_n_2(1000)
c_n_2(3471)  # stack usage error at 3472.
print(sprintf("b_n(%d) = %f", n, product))
print(sprintf("b_n(%d) = %f", n, product))
b_n(2)
0:4
?with
Granny <- c(first = 12, "2nd" = 4, third = 5)
Geraldine <- c(5,4,2)
baskets <- data.frame(Granny, Geraldine)
baskets
str(granny)
str(Granny)
View(baskets)
View(baskets)
buffTail <- c(10,1,37,5,12)
gardenBee <- c(8,3,19,6,4)
redTail <- c(18,9,1,2,4)
honeyBee <- c(12,13,16,9,10)
cardeeBee <- c(8,27,6,32,23)
bee <- data.frame(buffTail, gardenBee, redTail, honeyBee, cardeeBee)
bee
rownames(bee) <- c("Thistle", "Viper bugloss", "Golden rain", "Yellow alfafa", "Blackberry")
bee
names(bee) <- c("Buff tail", "Garden bee", "Red tail", "Honey bee", "Carder bee")
print(bee)
View(bee)
#create data.frame with matrix
bee2 <- matrix(buffTail, gardenBee, redTail, honeyBee, cardeeBee)
?matrix
#create data.frame with matrix
bee2 <- matrix(c(buffTail, gardenBee, redTail, honeyBee, cardeeBee), ncol = 5)
bee2
colnames(bee2) <- c("Buff tail", "Garden bee", "Red tail", "Honey bee", "Carder bee")
bee2df <- data.frame(bee2)
View(bee2df)
View(bee2df)
View(bee2)
View(bee2)
beaver1
#beavers
b1 <- beaver1
b2 <- beaver2
cbind(b1, id = rep(1, length(b1$activ)))
cbind(b2, id = rep(2, length(b1$activ)))
cbind(b2, id = rep(2, length(b2$activ)))
#concatenate the 2 dfs
combo <- rowbind(b1, b2)
#concatenate the 2 dfs
combo <- rbind(b1, b2)
combo
b1 <- cbind(b1, id = rep(1, length(b1$activ)))
b2 <- cbind(b2, id = rep(2, length(b2$activ)))
#concatenate the 2 dfs
combo <- rbind(b1, b2)
combo
#apparently recycles it
b1$id <- 1
#apparently recycles it
b1$id <- 3
b1
#apparently recycles it
b1$id <- 1
#find comon times when at least one beaver is active
subset <- combo[combo$activ == 1]
#concatenate the 2 dfs
combo <- rbind(b1, b2)
#find comon times when at least one beaver is active
subsetActive <- combo[combo$activ == 1]
combo
#find comon times when at least one beaver is active
subsetActive <- combo[combo$activ == 1,]
#next
df1 <- data.frame(name = c("Truman", "Brenna", "Diana"),
gender = c("Male", "Female", "Female"),
height = c(179, 191, 183))
is.data.frame(df1)
is.list(df1)
attr(df1)
?attr
str(df1)
attributes(df1)
df2 <- df1
#remove class atributes
attr(df2, class) <- NULL
#remove class atributes
attr(df2, $class) <- NULL
#remove class atributes
attr(df2, class)
#remove class atributes
attr(df2, "class")
#remove class atributes
attr(df2, "class") <- NULL
attributes(df2)
is.data.frame(df2)
is.list(df2)
?rnorm
?textOutput
library(shiny)
?textOutput
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
runApp('RandomNumber')
install.packages("reshape")
library("ggplot2")
library("manipulate")
library("RColorBrewer")
# Data and ggplot2 idea from:
# https://4dpiecharts.com/2011/08/17/user2011-easy-interactive-ggplots-talk/
chromium <- read.csv("chromium.csv", stringsAsFactors = FALSE)
nickel <- read.csv("nickel.csv", stringsAsFactors = FALSE)
setwd("/home/uros/Dropbox/davis project")
library("ggplot2")
library("manipulate")
library("RColorBrewer")
# Data and ggplot2 idea from:
# https://4dpiecharts.com/2011/08/17/user2011-easy-interactive-ggplots-talk/
chromium <- read.csv("chromium.csv", stringsAsFactors = FALSE)
nickel <- read.csv("nickel.csv", stringsAsFactors = FALSE)
setwd("/home/uros/Dropbox/davis project/children")
library("ggplot2")
library("manipulate")
library("RColorBrewer")
# Data and ggplot2 idea from:
# https://4dpiecharts.com/2011/08/17/user2011-easy-interactive-ggplots-talk/
chromium <- read.csv("chromium.csv", stringsAsFactors = FALSE)
nickel <- read.csv("nickel.csv", stringsAsFactors = FALSE)
View(chromium)
